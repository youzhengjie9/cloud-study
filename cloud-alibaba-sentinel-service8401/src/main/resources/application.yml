server:
  port: 8401

spring:
  application:
    name: sentinel-service
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
    #配置sentinel
    sentinel:
      transport:
        port: 8719   #Sentinel传输端口，如果8719被占用，就会一直+1（8720---8721...），直到找到没被占用的端口
        dashboard: localhost:8080  #Sentinel dashboard的地址
      #sentinel-nacos持久化
      datasource:
        #持久化==限流规则
        flow:
          nacos:
            server-addr: localhost:8848 #nacos服务器地址
            dataId: ${spring.application.name}-sentinel-flow    #这个dataId我们使用微服务名+ "-sentinel-flow"
            groupId: DEFAULT_GROUP
            data-type: json
            rule-type: flow  #指定规则为flow（限流）
#            namespace:
        #持久化==降级规则
        degrade:
          nacos:
            server-addr: localhost:8848
            dataId: ${spring.application.name}-sentinel-degrade
            groupId: SENTINEL_GROUP
            rule-type: degrade  #指定规则为degrade（降级）
        #持久化==热点规则
        param-flow:
          nacos:
            server-addr: localhost:8848
            dataId: ${spring.application.name}-sentinel-paramFlow
            groupId: SENTINEL_GROUP
            rule-type: param-flow  #指定规则为param-flow（热点key）



management:
  endpoints:
    web:
      exposure:
        include: "*"